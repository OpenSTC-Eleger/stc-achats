-
  tests of second part of purchase, dialog between buyer and service paying step
-
  then, i check generation of engagements
-
  !assert {model: purchase.order, id: openstc_achats_tests_po1, count: 1, severity: error, string: "Engages are not correctly created, check create_engage method"}:
    - engage_lines != False
    - len(engage_lines) == 1
    - engage_lines[0].budget_line_id.id == ref('openstc_achats_tests_budget1_line1')
    - engage_lines[0].amount == amount_total
-
  then i test dialog between buyer anc accountant service, via pdf invoices attached
-
  first, id add a new pdf invoice by creating ir.attachment record
-
  !python {model: ir.attachment}: |
    import base64
    values = {
    'res_model': 'purchase.order',
    'res_id': ref('openstc_achats_tests_po1'),
    'company_id': 1,
    'res_name': 'Open Engagements 1',
    'datas_fname': "F-2013-01-01-0001",
    'type': 'binary',
    'datas': base64.b64encode("a"),
    'name': "F-2013-01-01-0001"}
    self.pool.get("ir.model.data")._update(cr, uid,'ir.attachment','openstc_achat_stock',values, 'openstc_achats_tests_attach1', mode='update',noupdate=False)
    
-
  and i check that pdf attaches is considered as invoice
-
  !assert {model: ir.attachment, id: openstc_achats_tests_attach1, severity: error, string: "Attach not considered as invoice, check create overrided method of ir_attachment"}:
    - state == 'to_check'
-
  now, i check buyer treatment of pdf invoices, he cans refuse it or accept it
-
  i check first refusing of invoice, i have to create wizard associated to refusing
-
  !record {model: openstc.open.engage.refuse.inv.wizard, id: openstc_achats_tests_wizard_refuse1}:
    justif_refuse: automatic tests
-
  and i validate the wizard
-  
  !function {model: openstc.open.engage.refuse.inv.wizard, name: to_refuse}:
    - eval: ref('openstc_achats_tests_wizard_refuse1')
      model: openstc.open.engage.refuse.inv.wizard
    - eval: "{'attach_id': ref('openstc_achats_tests_attach1')}"
-
  i check that mail is sent with the text written above
-
  !assert {model: mail.message, search: "[('res_id','=',ref('openstc_achats_tests_po1')), ('model','=', 'purchase.order'), ('subject', 'like','%refus%')]", count: 1, severity: warning, string: "error during generating or sending email, check email.template or refuse_invoice_to_pay method of ir_attachment"}:
    - state == 'sent'
    - body_html.find('automatic tests') != -1
    - body_text.find('automatic tests') != -1
    - attachment_ids != False
    - attachment_ids[0].name == "F-2013-01-01-0001"
-
  and i check if ir_attachment state is to refused
-
  !assert {model: ir.attachment, id: openstc_achats_tests_attach1, severity: error, string: "Attach is not correctly set to refused, check refuse_invoice_to_pay method"}:
    - state in ('refused','except_send_mail')
-
  now i make same tests for validated pdf invoice
-
  first, i add a second pdf invoice by creating ir.attahment record
-
  !python {model: ir.attachment}: |
    import base64
    values = {
    'res_model': 'purchase.order',
    'res_id': ref('openstc_achats_tests_po1'),
    'company_id': 1,
    'res_name': 'Open Engagements 1',
    'datas_fname': "F-2013-01-01-0002",
    'type': 'binary',
    'datas': base64.b64encode("a"),
    'name': "F-2013-01-01-0002"}
    self.pool.get("ir.model.data")._update(cr, uid,'ir.attachment','openstc_achat_stock',values, 'openstc_achats_tests_attach2', mode='update',noupdate=False)
    
-
  and i check that pdf attached is considered as invoice
-
  !assert {model: ir.attachment, id: openstc_achats_tests_attach2, severity: error, string: "Attach not considered as invoice, check create overrided method of ir_attachment"}:
    - state == 'to_check'
-
  now, i check buyer treatment of pdf invoices, he cans refuse it or accept it
-
  i check then validation of invoice
-
  !function {model: ir.attachment, name: send_invoice_to_pay}:
    - eval: ref('openstc_achats_tests_attach2')
      model: ir.attachment
-
  i check that mail is sent
-
  !assert {model: mail.message, search: "[('res_id','=',ref('openstc_achats_tests_po1')), ('model','=','purchase.order'), ('subject', 'like','%Valid%')]", count: 1, severity: warning, string: "error during generating or sending email, check email.template or send_invoice_to_pay method of ir_attachment"}:
    - state == 'sent'
    - attachment_ids != False
    - attachment_ids[0].name == "F-2013-01-01-0002"
-
  and i check if ir_attachment state is to validated
-
  !assert {model: ir.attachment, id: openstc_achats_tests_attach2, severity: error, string: "Attach is not correctly set to validated, check refuse_invoice_to_pay method"}:
    - state in ('refused','except_send_mail')
-
  now, i test ending of purchase
-
  i force reception_ok to True, because stock.move are not tested for now
-
  !function {model: purchase.order, name: write}:
      - eval: ref('openstc_achats_tests_po1')
        model: purchase.order
      - eval: "{'reception_ok':True}"
-
  And i check that i can end this purchase order
-
  !function {model: ir.attachment, name: engage_complete}:
    - eval: ref('openstc_achats_tests_attach2')
      model: ir.attachment
-
  !assert {model: purchase.order, id: openstc_achats_tests_po1, severity: error, string: "Purchase order not correctly ended, check engage_complete method"}:
    - all_invoices_treated == True
-
  finally, i rollback database udpates after all of my tests files are executed
-
  !python {model: purchase.order}: |
    cr.rollback()